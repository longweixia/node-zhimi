
var app = require("../app");
var debug = require("debug")("node-zhimi:server");
var http = require("http");

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

var server = http.createServer(app);

var socket = require("socket.io");
var io = socket(server);

// 连接socket
//监听客户端连接
let userList = [];//私聊用户列表
let chatGroupList = {};
io.on('connection', (socket) => {
	// 前端调用发送消息接口，后端接收到并广播
	socket.on('login', (userInfo) => {
        userList.push(userInfo);
        io.emit('userList', userList);
        // socket.emit(给该socket的客户端发送消息) + socket.broadcast.emit(发给所以客户端，不包括自己)  = io.emit(给所有客户端广播消息)
	})

    socket.on('sendMsg', (data) => {
        socket.to(data.id).emit('receiveMsg', data)
	})

    socket.on('sendMsgGroup', (data) => {
        socket.to(data.roomId).emit('receiveMsgGroup', data);
    })

    // 创建群聊
    socket.on('createChatGroup', data => {
        socket.join(data.roomId);

        chatGroupList[data.roomId] = data;
        data.member.forEach(item => {
            io.to(item.id).emit('chatGroupList', data)
            io.to(item.id).emit('createChatGroup', data)
            // socket.to 本人没有收到
            // io.to 所有人都收到了
        });
    })

    // 加入群聊
    socket.on('joinChatGroup', data => {
        socket.join(data.info.roomId);
        io.to(data.info.roomId).emit('chatGrSystemNotice', {
            roomId: data.info.roomId,
            msg: data.userName+'加入了群聊!',
            system: true
        });//为房间中的所有的socket发送消息, 包括自己
    })

    socket.on('leave', data => {
        socket.leave(data.roomId, () => {
            let member = chatGroupList[data.roomId].member;
            let i = -1;
            member.forEach((item, index) => {
                if (item.id === socket.id) {
                    i = index;
                }
                io.to(item.id).emit('leaveChatGroup', {
                    id: socket.id, // 退出群聊人的id
                    roomId: data.roomId,
                    msg: data.userName+'离开了群聊!',
                    system: true
                })
            });
            if (i !== -1) {
                member.splice(i)
            }
        });
    })

    // 退出（内置事件）
    socket.on('disconnect', () => {
        chatGroupList = {};
        userList = userList.filter(item => item.id != socket.id)
        io.emit('quit', socket.id)
    })
})

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
